<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/run/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/run/Main.java" />
              <option name="originalContent" value="package run;&#10;&#10;import entities.Autor;&#10;import entities.Categoria;&#10;import entities.Libro;&#10;import services.dao.MyDao;&#10;import services.interfaces.ICRUD;&#10;&#10;import java.util.List;&#10;&#10;public class Main {&#10;    public static final ICRUD dao = new MyDao();&#10;&#10;    public static void insertarAutor() {&#10;        Autor autor = new Autor();&#10;        autor.setNombre(&quot;Gabriel Garcia Marquez&quot;);&#10;        autor.setNacionalidad(&quot;Mexicana&quot;);&#10;        dao.insert(autor);&#10;&#10;        Autor r = new Autor();&#10;        r.setNombre(&quot;Ruben Dario&quot;);&#10;        r.setNacionalidad(&quot;Nicaraguense&quot;);&#10;        dao.insert(r);&#10;    }&#10;&#10;    public static void listarAutores() {&#10;        System.out.println(&quot;Registro Almacenados&quot;);&#10;        List&lt;Autor&gt; autores = dao.getAll(&quot;autores.All&quot;, Autor.class);&#10;        autores.forEach(autor -&gt; System.out.println(autor.getNombre()));&#10;    }&#10;&#10;    public static void editarAutor() {&#10;        Autor a = new Autor();&#10;        a = dao.findById(1L, Autor.class);&#10;        if (a != null) {&#10;            a.setNacionalidad(&quot;Colombiana&quot;);&#10;            dao.update(a);&#10;        } else {&#10;            System.out.println(&quot;Autor con id 1 no encontrado para editar.&quot;);&#10;        }&#10;    }&#10;&#10;    public static void eliminarAutor() {&#10;        Autor a = new Autor();&#10;        a = dao.findById(2L, Autor.class);&#10;        if (a != null) {&#10;            dao.delete(a);&#10;        } else {&#10;            System.out.println(&quot;Autor con id 2 no encontrado para eliminar.&quot;);&#10;        }&#10;    }&#10;&#10;    /*&#10;        CRUD de categoria&#10;     */&#10;    public static void insertarCategoria() {&#10;        Categoria categoria = new Categoria();&#10;        categoria.setNombre(&quot;Novela&quot;);&#10;        // Guardar la categoría en la base de datos&#10;        dao.insert(categoria);&#10;    }&#10;&#10;    public static void listarCategorias() {&#10;        System.out.println(&quot;Categorias Almacenados&quot;);&#10;        List&lt;Categoria&gt; categorias = dao.getAll(&quot;categorias.All&quot;, Categoria.class);&#10;        categorias.forEach(categoria -&gt; System.out.println(categoria.getNombre()));&#10;    }&#10;&#10;    public static void editarCategoria() {&#10;        Categoria c = new Categoria();&#10;        c = dao.findById(1L, Categoria.class);&#10;        if (c != null) {&#10;            c.setNombre(&quot;Realismo Mágico&quot;);&#10;            dao.update(c);&#10;        } else {&#10;            System.out.println(&quot;Categoría con id 1 no encontrada para editar.&quot;);&#10;        }&#10;    }&#10;    public static void eliminarCategoria() {&#10;        Categoria c = new Categoria();&#10;        c = dao.findById(1L, Categoria.class);&#10;        if (c != null) {&#10;            dao.delete(c);&#10;        } else {&#10;            System.out.println(&quot;Categoría con id 1 no encontrada para eliminar.&quot;);&#10;        }&#10;&#10;    }&#10;     /*&#10;        CRUD de libro&#10;     */&#10;&#10;    public static void insertarLibro() {&#10;        Libro libro = new Libro();&#10;        libro.setTitulo(&quot;Cien Años de Soledad&quot;);&#10;        libro.setAnioPub(1967);&#10;        // Intentar asignar un autor y categoría por defecto si existen (id = 1)&#10;        Autor autor = dao.findById(1L, Autor.class);&#10;        if (autor != null) {&#10;            libro.setAutor(autor);&#10;        }&#10;        Categoria categoria = dao.findById(1L, Categoria.class);&#10;        if (categoria != null) {&#10;            libro.setCategoria(categoria);&#10;        }&#10;        dao.insert(libro);&#10;    }&#10;&#10;    public static void listarLibros() {&#10;        System.out.println(&quot;Libros Almacenados&quot;);&#10;        List&lt;Libro&gt; libros = dao.getAll(&quot;libros&quot;, Libro.class);&#10;        libros.forEach(libro -&gt; System.out.println(libro.getTitulo()));&#10;    }&#10;&#10;    public static void editarLibro() {&#10;        Libro l = new Libro();&#10;        l = dao.findById(1L, Libro.class);&#10;        if (l != null) {&#10;            l.setAnioPub(1970);&#10;            dao.update(l);&#10;        } else {&#10;            System.out.println(&quot;Libro con id 1 no encontrado para editar.&quot;);&#10;        }&#10;    }&#10;&#10;    public static void eliminarLibro() {&#10;        Libro l = new Libro();&#10;        l = dao.findById(1L, Libro.class);&#10;        if (l != null) {&#10;            dao.delete(l);&#10;        } else {&#10;            System.out.println(&quot;Libro con id 1 no encontrado para eliminar.&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Asigna un autor y una categoría a un libro existente.&#10;     * Realiza comprobaciones nulas e informa por consola.&#10;     * @param libroId id del libro a asignar&#10;     * @param autorId id del autor a asignar&#10;     * @param categoriaId id de la categoría a asignar&#10;     */&#10;    public static void asignarLibroYCategoria(Long libroId, Long autorId, Long categoriaId) {&#10;        // Buscar las entidades&#10;        Libro libro = dao.findById(libroId, Libro.class);&#10;        if (libro == null) {&#10;            System.out.println(&quot;No se encontró el libro con id: &quot; + libroId);&#10;            return;&#10;        }&#10;&#10;        Autor autor = dao.findById(autorId, Autor.class);&#10;        if (autor == null) {&#10;            System.out.println(&quot;No se encontró el autor con id: &quot; + autorId);&#10;            return;&#10;        }&#10;&#10;        Categoria categoria = dao.findById(categoriaId, Categoria.class);&#10;        if (categoria == null) {&#10;            System.out.println(&quot;No se encontró la categoría con id: &quot; + categoriaId);&#10;            return;&#10;        }&#10;&#10;        // Asignar y persistir&#10;        libro.setAutor(autor);&#10;        libro.setCategoria(categoria);&#10;        dao.update(libro);&#10;&#10;        System.out.println(&quot;Asignación realizada: libro='&quot; + libro.getTitulo() + &quot;', autor='&quot; + autor.getNombre() + &quot;', categoria='&quot; + categoria.getNombre() + &quot;'&quot;);&#10;    }&#10;&#10;    /**&#10;     * Versión sin parámetros que usa ids por defecto (1)&#10;     */&#10;    public static void asignarLibroYCategoria() {&#10;        asignarLibroYCategoria(1L, 1L, 1L);&#10;    }&#10;&#10;&#10;    public static void main(String[] args) {&#10;        insertarAutor();&#10;        listarAutores();&#10;        editarAutor();&#10;        listarAutores();&#10;        eliminarAutor();&#10;        listarAutores();&#10;&#10;        /*&#10;            prueba crud categoria&#10;         */&#10;&#10;        insertarCategoria();&#10;        listarCategorias();&#10;        editarCategoria();&#10;        listarCategorias();&#10;        eliminarCategoria();&#10;        listarCategorias();&#10;&#10;        /*&#10;            prueba crud libro&#10;         */&#10;        insertarLibro();&#10;        listarLibros();&#10;        // Asignar explícitamente (si necesitamos otro id usar la sobrecarga con parámetros)&#10;        asignarLibroYCategoria();&#10;        listarLibros();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package run;&#10;&#10;import entities.Autor;&#10;import entities.Categoria;&#10;import entities.Libro;&#10;import services.dao.MyDao;&#10;import services.interfaces.ICRUD;&#10;&#10;import java.util.List;&#10;&#10;public class Main {&#10;    public static final ICRUD dao = new MyDao();&#10;&#10;    public static void insertarAutor() {&#10;        Autor autor = new Autor();&#10;        autor.setNombre(&quot;Gabriel Garcia Marquez&quot;);&#10;        autor.setNacionalidad(&quot;Mexicana&quot;);&#10;        dao.insert(autor);&#10;&#10;        Autor r = new Autor();&#10;        r.setNombre(&quot;Ruben Dario&quot;);&#10;        r.setNacionalidad(&quot;Nicaraguense&quot;);&#10;        dao.insert(r);&#10;    }&#10;&#10;    public static void listarAutores() {&#10;        System.out.println(&quot;Registro Almacenados&quot;);&#10;        List&lt;Autor&gt; autores = dao.getAll(&quot;autores.All&quot;, Autor.class);&#10;        autores.forEach(autor -&gt; System.out.println(autor.getNombre()));&#10;    }&#10;&#10;    public static void editarAutor() {&#10;        Autor a = new Autor();&#10;        a = dao.findById(1L, Autor.class);&#10;        if (a != null) {&#10;            a.setNacionalidad(&quot;Colombiana&quot;);&#10;            dao.update(a);&#10;        } else {&#10;            System.out.println(&quot;Autor con id 1 no encontrado para editar.&quot;);&#10;        }&#10;    }&#10;&#10;    public static void eliminarAutor() {&#10;        Autor a = new Autor();&#10;        a = dao.findById(2L, Autor.class);&#10;        if (a != null) {&#10;            dao.delete(a);&#10;        } else {&#10;            System.out.println(&quot;Autor con id 2 no encontrado para eliminar.&quot;);&#10;        }&#10;    }&#10;&#10;    /*&#10;        CRUD de categoria&#10;     */&#10;    public static void insertarCategoria() {&#10;        Categoria categoria = new Categoria();&#10;        categoria.setNombre(&quot;Novela&quot;);&#10;        // Guardar la categoría en la base de datos&#10;        dao.insert(categoria);&#10;    }&#10;&#10;    public static void listarCategorias() {&#10;        System.out.println(&quot;Categorias Almacenados&quot;);&#10;        List&lt;Categoria&gt; categorias = dao.getAll(&quot;categorias.All&quot;, Categoria.class);&#10;        categorias.forEach(categoria -&gt; System.out.println(categoria.getNombre()));&#10;    }&#10;&#10;    public static void editarCategoria() {&#10;        Categoria c = new Categoria();&#10;        c = dao.findById(1L, Categoria.class);&#10;        if (c != null) {&#10;            c.setNombre(&quot;Realismo Mágico&quot;);&#10;            dao.update(c);&#10;        } else {&#10;            System.out.println(&quot;Categoría con id 1 no encontrada para editar.&quot;);&#10;        }&#10;    }&#10;    public static void eliminarCategoria() {&#10;        Categoria c = new Categoria();&#10;        c = dao.findById(1L, Categoria.class);&#10;        if (c != null) {&#10;            dao.delete(c);&#10;        } else {&#10;            System.out.println(&quot;Categoría con id 1 no encontrada para eliminar.&quot;);&#10;        }&#10;&#10;    }&#10;     /*&#10;        CRUD de libro&#10;     */&#10;&#10;    public static void insertarLibro() {&#10;        Libro libro = new Libro();&#10;        libro.setTitulo(&quot;Cien Años de Soledad&quot;);&#10;        libro.setAnioPub(1967);&#10;        // Intentar asignar un autor y categoría por defecto si existen (id = 1)&#10;        Autor autor = dao.findById(1L, Autor.class);&#10;        if (autor != null) {&#10;            libro.setAutor(autor);&#10;        }&#10;        Categoria categoria = dao.findById(1L, Categoria.class);&#10;        if (categoria != null) {&#10;            libro.setCategoria(categoria);&#10;        }&#10;        dao.insert(libro);&#10;    }&#10;&#10;    public static void listarLibros() {&#10;        System.out.println(&quot;Libros Almacenados&quot;);&#10;        List&lt;Libro&gt; libros = dao.getAll(&quot;libros&quot;, Libro.class);&#10;        libros.forEach(libro -&gt; System.out.println(libro.getTitulo()));&#10;    }&#10;&#10;    public static void editarLibro() {&#10;        Libro l = new Libro();&#10;        l = dao.findById(1L, Libro.class);&#10;        if (l != null) {&#10;            l.setAnioPub(1970);&#10;            dao.update(l);&#10;        } else {&#10;            System.out.println(&quot;Libro con id 1 no encontrado para editar.&quot;);&#10;        }&#10;    }&#10;&#10;    public static void eliminarLibro() {&#10;        Libro l = new Libro();&#10;        l = dao.findById(1L, Libro.class);&#10;        if (l != null) {&#10;            dao.delete(l);&#10;        } else {&#10;            System.out.println(&quot;Libro con id 1 no encontrado para eliminar.&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Asigna un autor y una categoría a un libro existente.&#10;     * Realiza comprobaciones nulas e informa por consola.&#10;     * Usa el método atómico de MyDao cuando está disponible para evitar problemas con entidades detached.&#10;     * @param libroId id del libro a asignar&#10;     * @param autorId id del autor a asignar&#10;     * @param categoriaId id de la categoría a asignar&#10;     */&#10;    public static void asignarLibroYCategoria(Long libroId, Long autorId, Long categoriaId) {&#10;        if (dao instanceof MyDao) {&#10;            // Usar el método atómico que abre una sola EntityManager/Transacción&#10;            ((MyDao) dao).asignarAutorYCategoriaALibro(libroId, autorId, categoriaId);&#10;            return;&#10;        }&#10;&#10;        // Fallback genérico usando las operaciones del ICRUD: findById + update&#10;        Libro libro = dao.findById(libroId, Libro.class);&#10;        if (libro == null) {&#10;            System.out.println(&quot;No se encontró el libro con id: &quot; + libroId);&#10;            return;&#10;        }&#10;&#10;        Autor autor = dao.findById(autorId, Autor.class);&#10;        if (autor == null) {&#10;            System.out.println(&quot;No se encontró el autor con id: &quot; + autorId);&#10;            return;&#10;        }&#10;&#10;        Categoria categoria = dao.findById(categoriaId, Categoria.class);&#10;        if (categoria == null) {&#10;            System.out.println(&quot;No se encontró la categoría con id: &quot; + categoriaId);&#10;            return;&#10;        }&#10;&#10;        libro.setAutor(autor);&#10;        libro.setCategoria(categoria);&#10;        dao.update(libro);&#10;&#10;        System.out.println(&quot;Asignación realizada: libro='&quot; + libro.getTitulo() + &quot;', autor='&quot; + autor.getNombre() + &quot;', categoria='&quot; + categoria.getNombre() + &quot;'&quot;);&#10;    }&#10;&#10;    /**&#10;     * Versión sin parámetros que usa ids por defecto (1)&#10;     */&#10;    public static void asignarLibroYCategoria() {&#10;        asignarLibroYCategoria(1L, 1L, 1L);&#10;    }&#10;&#10;&#10;    public static void main(String[] args) {&#10;        insertarAutor();&#10;        listarAutores();&#10;        editarAutor();&#10;        listarAutores();&#10;        eliminarAutor();&#10;        listarAutores();&#10;&#10;        /*&#10;            prueba crud categoria&#10;         */&#10;&#10;        insertarCategoria();&#10;        listarCategorias();&#10;        editarCategoria();&#10;        listarCategorias();&#10;        eliminarCategoria();&#10;        listarCategorias();&#10;&#10;        /*&#10;            prueba crud libro&#10;         */&#10;        insertarLibro();&#10;        listarLibros();&#10;        // Asignar explícitamente (si necesitamos otro id usar la sobrecarga con parámetros)&#10;        asignarLibroYCategoria();&#10;        listarLibros();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>